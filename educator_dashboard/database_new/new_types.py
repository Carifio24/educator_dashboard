"""
Type definitions for CosmicDS Educator Dashboard
Generated by Copilot
"""

from typing import Dict, List, Optional, Union, Any, TypedDict, Literal


class SpeechSettings(TypedDict):
    rate: float
    pitch: float
    voice: Optional[str]
    autoread: bool


class ClassInfo(TypedDict):
    id: int
    code: str
    name: str
    test: bool
    active: bool
    created: str
    updated: Optional[str]
    educator_id: int
    small_class: bool
    asynchronous: bool
    expected_size: int


class Classroom(TypedDict):
    size: int
    class_info: ClassInfo


class AppState(TypedDict):
    speech: SpeechSettings
    student: Dict[str, int]
    classroom: Classroom
    update_db: bool


class MCQuestionScore(TypedDict):
    tag: str
    score: Optional[int]
    stage: str
    tries: int
    choice: Optional[int]
    wrong_attempts: int


class FreeResponseItem(TypedDict):
    tag: str
    stage: str
    response: str
    initialized: bool


class StoryState(TypedDict):
    title: str
    story_id: str
    last_route: str
    mc_scoring: Dict[str, Dict[str, MCQuestionScore]]
    calculations: Dict[str, Any]
    best_fit_slope: Optional[float]
    free_responses: Dict[str, Dict[str, FreeResponseItem]]
    max_route_index: int
    class_data_students: List[Any]
    has_best_fit_galaxy: bool


class StudentInfo(TypedDict):
    username: str
    email: str
    name: Optional[str]


class StudentEntry(TypedDict):
    student_id: int
    story_name: str
    story_state: Dict[str, Union[AppState, StoryState]]
    last_modified: str
    student: StudentInfo


class Roster(TypedDict):
    """Represents the list of students in a class"""
    students: List[StudentEntry]


# Transformed roster structure (after processing by Roster class)
class ProcessedMCScore(TypedDict):
    tries: int
    choice: Optional[int]
    score: Optional[int]


class ProcessedStage(TypedDict):
    marker: Optional[str]
    state: Dict[str, Any]
    index: int
    progress: Optional[float]
    current_step: Optional[str]
    max_step: Optional[str]


class ProcessedFreeResponse(TypedDict):
    """Free response answers organized by stage and question"""
    stage_name: Dict[str, str]  # question_key: response


class ProcessedState(TypedDict):
    """Student state after processing"""
    stages: Dict[str, ProcessedStage]
    mc_scoring: Dict[str, Dict[str, ProcessedMCScore]]
    responses: Dict[str, Dict[str, str]]
    student_id: int
    max_stage_index: int
    max_marker: str
    stage_index: int
    total_score: int